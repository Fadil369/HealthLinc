import{r as e,j as t,v as o,R as a,Q as n}from"./react-DbYntunD.js";import{P as i,l as s}from"./auth-Cd5NpMP9.js";const r=e.createContext(void 0),c={en:{"nav.dashboard":"Dashboard","nav.patients":"Patients","nav.appointments":"Appointments","nav.clinicalNotes":"Clinical Notes","nav.priorAuth":"Prior Auth","nav.telehealth":"Telehealth","nav.rcmOptimizer":"RCM Optimizer","nav.monitorCompliance":"Monitor & Compliance","nav.iotDataHub":"IoT Data Hub","nav.settings":"Settings","dashboard.title":"Healthcare Analytics Dashboard","dashboard.subtitle":"Comprehensive view of your healthcare operations","dashboard.activePatients":"Active Patients","dashboard.upcomingAppointments":"Upcoming Appointments","dashboard.notesToReview":"Notes to Review","dashboard.authorizationsPending":"Authorizations Pending","dashboard.liveTelehealthSessions":"Live Telehealth Sessions","dashboard.systemHealth":"System Health","dashboard.quickActions":"Quick Actions","dashboard.newPatient":"New Patient","dashboard.scheduleVisit":"Schedule Visit","dashboard.uploadDeviceData":"Upload Device Data","dashboard.runRcmScan":"Run RCM Scan","common.search":"Search patients, appointments...","common.notificationBell":"Notifications","common.profile":"My Profile","common.signOut":"Sign out","common.systemHealthOptimal":"System Health: Optimal","common.version":"BrainSAIT v1.0","settings.title":"Settings","settings.subtitle":"Configure your BrainSAIT platform preferences and integrations","settings.themeSettings":"Theme Settings","settings.agentManagement":"Agent Management","settings.helpDocumentation":"Help & Documentation","settings.languageLocalization":"Language & Localization","settings.appearance":"Appearance","settings.lightTheme":"Light Theme","settings.darkTheme":"Dark Theme","settings.language":"Language","settings.selectLanguage":"Select your preferred language","settings.textDirection":"Text Direction","settings.leftToRight":"Left to Right (LTR)","settings.rightToLeft":"Right to Left (RTL)","settings.applyChanges":"Apply Changes","user.name":"Dr. Sarah Wilson","user.role":"Physician","user.email":"sarah.wilson@brainsait.com","rcm.title":"RCM Optimizer & Analytics","rcm.subtitle":"AI-powered revenue cycle management and claims optimization","rcm.totalClaims":"Total Claims","rcm.collectionRate":"Collection Rate","rcm.highRiskClaims":"High Risk Claims","rcm.requiresAttention":"Requires attention","rcm.improvement":"improvement","rcm.fromLastMonth":"from last month","rcm.riskHeatmap":"Risk Heatmap","rcm.claims":"claims","rcm.denialRate":"Denial Rate","rcm.highRiskClaimsList":"High-Risk Claims","rcm.allRiskLevels":"All Risk Levels","rcm.highRisk":"High Risk","rcm.mediumRisk":"Medium Risk","rcm.lowRisk":"Low Risk","rcm.risk":"risk","rcm.patient":"Patient","rcm.cptCode":"CPT","rcm.amount":"Amount","rcm.viewAISuggestions":"View AI Suggestions","rcm.aiRecommendations":"AI Recommendations:","rcm.claimsSelected":"claims selected","rcm.bulkApplyAI":"Bulk Apply AI Corrections","rcm.exportReport":"Export Report","rcm.runAnalysis":"Run RCM Analysis"},ar:{"nav.dashboard":"لوحة التحكم","nav.patients":"المرضى","nav.appointments":"المواعيد","nav.clinicalNotes":"الملاحظات السريرية","nav.priorAuth":"التصريح المسبق","nav.telehealth":"التطبيب عن بُعد","nav.rcmOptimizer":"محسن إدارة الإيرادات","nav.monitorCompliance":"المراقبة والامتثال","nav.iotDataHub":"مركز بيانات إنترنت الأشياء","nav.settings":"الإعدادات","dashboard.title":"لوحة تحليلات الرعاية الصحية","dashboard.subtitle":"نظرة شاملة على عمليات الرعاية الصحية الخاصة بك","dashboard.activePatients":"المرضى النشطون","dashboard.upcomingAppointments":"المواعيد القادمة","dashboard.notesToReview":"الملاحظات للمراجعة","dashboard.authorizationsPending":"التصاريح المعلقة","dashboard.liveTelehealthSessions":"جلسات التطبيب المباشرة","dashboard.systemHealth":"حالة النظام","dashboard.quickActions":"الإجراءات السريعة","dashboard.newPatient":"مريض جديد","dashboard.scheduleVisit":"جدولة زيارة","dashboard.uploadDeviceData":"رفع بيانات الجهاز","dashboard.runRcmScan":"تشغيل فحص إدارة الإيرادات","common.search":"البحث عن المرضى والمواعيد...","common.notificationBell":"الإشعارات","common.profile":"ملفي الشخصي","common.signOut":"تسجيل الخروج","common.systemHealthOptimal":"حالة النظام: مثلى","common.version":"براين سايت الإصدار 1.0","settings.title":"الإعدادات","settings.subtitle":"تكوين تفضيلات منصة براين سايت والتكامل","settings.themeSettings":"إعدادات المظهر","settings.agentManagement":"إدارة الوكلاء","settings.helpDocumentation":"المساعدة والوثائق","settings.languageLocalization":"اللغة والترجمة","settings.appearance":"المظهر","settings.lightTheme":"المظهر الفاتح","settings.darkTheme":"المظهر الداكن","settings.language":"اللغة","settings.selectLanguage":"اختر لغتك المفضلة","settings.textDirection":"اتجاه النص","settings.leftToRight":"من اليسار إلى اليمين","settings.rightToLeft":"من اليمين إلى اليسار","settings.applyChanges":"تطبيق التغييرات","user.name":"د. سارة ويلسون","user.role":"طبيبة","user.email":"sarah.wilson@brainsait.com","rcm.title":"محسن إدارة الإيرادات والتحليلات","rcm.subtitle":"إدارة دورة الإيرادات وتحسين المطالبات بمساعدة الذكاء الاصطناعي","rcm.totalClaims":"إجمالي المطالبات","rcm.collectionRate":"معدل التحصيل","rcm.highRiskClaims":"مطالبات عالية الخطورة","rcm.requiresAttention":"تتطلب اهتمام","rcm.improvement":"تحسن","rcm.fromLastMonth":"من الشهر الماضي","rcm.riskHeatmap":"خريطة حرارة المخاطر","rcm.claims":"مطالبات","rcm.denialRate":"معدل الرفض","rcm.highRiskClaimsList":"المطالبات عالية الخطورة","rcm.allRiskLevels":"جميع مستويات المخاطر","rcm.highRisk":"مخاطر عالية","rcm.mediumRisk":"مخاطر متوسطة","rcm.lowRisk":"مخاطر منخفضة","rcm.risk":"خطر","rcm.patient":"المريض","rcm.cptCode":"رمز CPT","rcm.amount":"المبلغ","rcm.viewAISuggestions":"عرض اقتراحات الذكاء الاصطناعي","rcm.aiRecommendations":"توصيات الذكاء الاصطناعي:","rcm.claimsSelected":"تم تحديد المطالبات","rcm.bulkApplyAI":"تطبيق تصحيحات الذكاء الاصطناعي بالجملة","rcm.exportReport":"تصدير التقرير","rcm.runAnalysis":"تشغيل تحليل إدارة الإيرادات"}};function l({children:o}){const[a,n]=e.useState("en"),i="ar"===a?"rtl":"ltr",s=e=>{n(e),localStorage.setItem("brainsait-language",e),document.documentElement.dir="ar"===e?"rtl":"ltr",document.documentElement.lang=e};return e.useEffect((()=>{const e=localStorage.getItem("brainsait-language");!e||"en"!==e&&"ar"!==e||s(e)}),[]),t.jsx(r.Provider,{value:{language:a,direction:i,setLanguage:s,t:e=>c[a][e]||e},children:o})}function d(){const t=e.useContext(r);if(void 0===t)throw new Error("useLanguage must be used within a LanguageProvider");return t}const u=e.createContext(void 0);function h({children:o}){const[a,n]=e.useState("light"),i=e=>{n(e),localStorage.setItem("brainsait-theme",e),"dark"===e?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")};return e.useEffect((()=>{const e=localStorage.getItem("brainsait-theme");if(e&&("light"===e||"dark"===e))return void i(e);const t=window.matchMedia("(prefers-color-scheme: dark)").matches;i(t?"dark":"light");const o=window.matchMedia("(prefers-color-scheme: dark)"),a=e=>{i(e.matches?"dark":"light")};return o.addEventListener("change",a),()=>o.removeEventListener("change",a)}),[]),t.jsx(u.Provider,{value:{theme:a,setTheme:i,toggleTheme:()=>{i("light"===a?"dark":"light")}},children:o})}function m(){const t=e.useContext(u);if(void 0===t)throw new Error("useTheme must be used within a ThemeProvider");return t}const p={google:{clientId:"",scope:"openid email profile",authUrl:"https://accounts.google.com/oauth/authorize"},microsoft:{clientId:"",authority:"https://login.microsoftonline.com/common",scopes:["openid","profile","email"]},github:{clientId:"Ov23liqV068KCxscpq7l",scope:"read:user user:email",authUrl:"https://github.com/login/oauth/authorize"},linkedin:{clientId:"78nrbipf31tm67",scope:"openid profile email",authUrl:"https://www.linkedin.com/oauth/v2/authorization"},gravatar:{clientId:"103135",scope:"global",authUrl:"https://public-api.wordpress.com/oauth2/authorize"}},g=new i({auth:{clientId:p.microsoft.clientId,authority:p.microsoft.authority,redirectUri:"http://localhost:5174/auth/callback"},cache:{cacheLocation:"sessionStorage",storeAuthStateInCookie:!1}}),f=e=>new Promise(((t,o)=>{const a=(e=>{const t=p[e],o=encodeURIComponent("https://care.brainsait.io/auth/callback");switch(e){case"google":case"gravatar":return`${t.authUrl}?client_id=${t.clientId}&redirect_uri=${o}&response_type=code&scope=${encodeURIComponent(t.scope)}&state=${e}`;case"github":return`${t.authUrl}?client_id=${t.clientId}&redirect_uri=${o}&scope=${encodeURIComponent(t.scope)}&state=${e}`;case"linkedin":return`${t.authUrl}?response_type=code&client_id=${t.clientId}&redirect_uri=${o}&scope=${encodeURIComponent(t.scope)}&state=${e}`;default:throw new Error(`Unsupported OAuth provider: ${e}`)}})(e),n=window.open(a,`${e}-oauth`,"width=600,height=700,scrollbars=yes,resizable=yes,top=100,left="+(screen.width/2-300));if(!n)return void o(new Error("Failed to open popup. Please allow popups for this site."));let i=!1,s=!1;const r=()=>{window.removeEventListener("message",c),clearInterval(l),clearTimeout(d)},c=a=>{if([window.location.origin,"https://care.brainsait.io","http://localhost:5174"].some((e=>a.origin===e||a.origin.includes("care.brainsait.io")))&&!s)return a.data.error?(s=!0,i=!0,r(),setTimeout((()=>{n.closed||n.close()}),500),void o(new Error(a.data.error))):a.data.code&&a.data.state===e?(s=!0,i=!0,r(),setTimeout((()=>{n.closed||n.close()}),500),void t(a.data.code)):void 0};window.addEventListener("message",c),n.focus&&n.focus();const l=setInterval((()=>{try{if(n.closed)return void(i||s||(s=!0,r(),o(new Error(`${e} OAuth popup was closed before authentication completed`))))}catch(t){}}),2e3),d=setTimeout((()=>{if(!s){s=!0,r();try{n.closed||n.close()}catch(t){}o(new Error(`${e} OAuth popup timeout (5 minutes)`))}}),3e5)})),w=e.createContext(void 0);function y({children:i}){const[s,r]=e.useState(null),[c,l]=e.useState(!0),d=o(),u="http://localhost:8000",h=a.useCallback((()=>{localStorage.removeItem("access_token"),localStorage.removeItem("token_type"),r(null),d("/login"),n.info("Logged out successfully")}),[d]),m=a.useCallback((async()=>{const e=localStorage.getItem("access_token");if(!e)throw new Error("No token found");const t=await fetch(`${u}/user/profile`,{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to fetch user profile");const o=await t.json();r(o)}),[u]);e.useEffect((()=>{(async()=>{if(localStorage.getItem("access_token"))try{await m()}catch(e){h()}l(!1)})()}),[m,h]);return t.jsx(w.Provider,{value:{user:s,loading:c,login:async(e,t)=>{l(!0);try{const o=await fetch(`${u}/token`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({username:e,password:t})});if(!o.ok){const e=await o.json();throw new Error(e.detail||"Login failed")}const a=await o.json();localStorage.setItem("access_token",a.access_token),localStorage.setItem("token_type",a.token_type),r(a.user),n.success("Login successful!"),d("/")}catch(o){throw n.error(o instanceof Error?o.message:"Login failed"),o}finally{l(!1)}},register:async e=>{l(!0);try{const t=await fetch(`${u}/auth/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({first_name:e.firstName,last_name:e.lastName,email:e.email,password:e.password,company_name:e.companyName,role:e.role||"user"})});if(!t.ok){const e=await t.json();throw new Error(e.detail||"Registration failed")}const o=await t.json();localStorage.setItem("access_token",o.access_token),localStorage.setItem("token_type",o.token_type),r(o.user),n.success("Registration successful!"),d("/")}catch(t){throw n.error(t instanceof Error?t.message:"Registration failed"),t}finally{l(!1)}},logout:h,updateProfile:async e=>{const t=localStorage.getItem("access_token");if(!t||!s)throw new Error("Not authenticated");const o=await fetch(`${u}/user/profile`,{method:"PUT",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok)throw new Error("Failed to update profile");const a=await o.json();r(a),n.success("Profile updated successfully!")},changePassword:async(e,t)=>{const o=localStorage.getItem("access_token");if(!o)throw new Error("No authentication token found");const a=await fetch(`${u}/auth/change-password`,{method:"POST",headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"},body:JSON.stringify({currentPassword:e,newPassword:t})});if(!a.ok){const e=await a.json();throw new Error(e.detail||"Failed to change password")}n.success("Password changed successfully!")},refreshToken:async()=>{const e=localStorage.getItem("access_token");if(!e)throw new Error("No token found");const t=await fetch(`${u}/auth/refresh`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to refresh token");const o=await t.json();localStorage.setItem("access_token",o.access_token)},loginWithGoogle:async()=>{try{l(!0);const e=await f("google"),t=await fetch(`${u}/auth/oauth/google`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({code:e})});if(!t.ok)throw new Error("Google login failed");const o=await t.json();localStorage.setItem("access_token",o.access_token),r(o.user),n.success("Successfully logged in with Google!"),d("/dashboard")}catch(e){n.error("Google login failed. Please try again.")}finally{l(!1)}},loginWithMicrosoft:async()=>{try{l(!0);const e=await(async()=>{try{return await g.loginPopup({scopes:p.microsoft.scopes,prompt:"select_account"})}catch(e){throw e}})(),t=await fetch(`${u}/auth/oauth/microsoft`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({accessToken:e.accessToken,account:e.account})});if(!t.ok)throw new Error("Microsoft login failed");const o=await t.json();localStorage.setItem("access_token",o.access_token),r(o.user),n.success("Successfully logged in with Microsoft!"),d("/dashboard")}catch(e){n.error("Microsoft login failed. Please try again.")}finally{l(!1)}},loginWithGitHub:async()=>{try{l(!0);const t=n.loading("Opening GitHub login...");try{const e=await f("github");n.update(t,{render:"Completing GitHub login..."});const o=await fetch(`${u}/auth/oauth/github`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({code:e})});if(!o.ok){const e=await o.json();throw new Error(e.error||"GitHub login failed")}const a=await o.json();localStorage.setItem("access_token",a.access_token),r(a.user),n.update(t,{render:"Successfully logged in with GitHub!",type:"success",isLoading:!1,autoClose:3e3}),d("/dashboard")}catch(e){throw n.dismiss(t),e}}catch(t){const e=t instanceof Error?t.message:"GitHub login failed. Please try again.";e.includes("popup was closed")?n.error("GitHub login was cancelled. Please try again and complete the authorization."):e.includes("popup timeout")?n.error("GitHub login took too long. Please try again."):e.includes("Failed to open popup")?n.error("Please allow popups for this site and try again."):n.error(e)}finally{l(!1)}},loginWithLinkedIn:async()=>{try{l(!0);const t=n.loading("Opening LinkedIn login...");try{const e=await f("linkedin");n.update(t,{render:"Completing LinkedIn login..."});const o=await fetch(`${u}/auth/oauth/linkedin`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({code:e})});if(!o.ok){const e=await o.json();throw new Error(e.error||"LinkedIn login failed")}const a=await o.json();localStorage.setItem("access_token",a.access_token),r(a.user),n.update(t,{render:"Successfully logged in with LinkedIn!",type:"success",isLoading:!1,autoClose:3e3}),d("/dashboard")}catch(e){throw n.dismiss(t),e}}catch(t){const e=t instanceof Error?t.message:"LinkedIn login failed. Please try again.";e.includes("popup was closed")?n.error("LinkedIn login was cancelled. Please try again and complete the authorization."):e.includes("popup timeout")?n.error("LinkedIn login took too long. Please try again."):e.includes("Failed to open popup")?n.error("Please allow popups for this site and try again."):n.error(e)}finally{l(!1)}},loginWithGravatar:async()=>{try{l(!0);const t=n.loading("Opening Gravatar login...");try{const e=await f("gravatar");n.update(t,{render:"Completing Gravatar login..."});const o=await fetch(`${u}/auth/oauth/gravatar`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({code:e})});if(!o.ok){const e=await o.json();throw new Error(e.error||"Gravatar login failed")}const a=await o.json();localStorage.setItem("access_token",a.access_token),r(a.user),n.update(t,{render:"Successfully logged in with Gravatar!",type:"success",isLoading:!1,autoClose:3e3}),d("/dashboard")}catch(e){throw n.dismiss(t),e}}catch(t){const e=t instanceof Error?t.message:"Gravatar login failed. Please try again.";e.includes("popup was closed")?n.error("Gravatar login was cancelled. Please try again and complete the authorization."):e.includes("popup timeout")?n.error("Gravatar login took too long. Please try again."):e.includes("Failed to open popup")?n.error("Please allow popups for this site and try again."):n.error(e)}finally{l(!1)}}},children:i})}function k(){const t=e.useContext(w);if(void 0===t)throw new Error("useAuth must be used within an AuthProvider");return t}const b=s("pk_test_your_key"),v=e.createContext(void 0);function S({children:o}){const[i,s]=e.useState(null),[r,c]=e.useState(null),[l,d]=e.useState([]),[u,h]=e.useState(!1),{user:m}=k(),p="http://localhost:8000";e.useEffect((()=>{g()}),[]);const g=async()=>{try{const e=await b;s(e)}catch(e){}},f=()=>{const e=localStorage.getItem("token");return{"Content-Type":"application/json",Authorization:e?`Bearer ${e}`:""}},w=a.useCallback((async()=>{if(m)try{const e=await fetch(`${p}/subscription/status`,{headers:f()});if(e.ok){const t=await e.json();c(t)}}catch(e){}}),[m,p]),y=a.useCallback((async()=>{if(m)try{const e=await fetch(`${p}/payment/methods`,{headers:f()});if(e.ok){const t=await e.json();d(t)}}catch(e){}}),[m,p]);e.useEffect((()=>{m&&(w(),y())}),[m,w,y]);return t.jsx(v.Provider,{value:{stripe:i,subscriptionTiers:[{id:"basic",name:"Basic",price:17,description:"Single claim request and response",features:["1 claim request","Basic support","Email notifications","Basic reporting"]},{id:"pro",name:"Pro Integration",price:363,description:"Full NPHIES integration with basic features",features:["Unlimited claims","Eligibility checks","Basic reporting","Email support","API access"],isPopular:!0},{id:"premium",name:"Premium Integration",price:693,description:"Advanced NPHIES integration with premium features",features:["Everything in Pro","Batch processing","Advanced reporting","Priority support","Custom integrations","Real-time monitoring"]},{id:"enterprise",name:"Enterprise Integration",price:963,description:"Complete NPHIES solution for large organizations",features:["Everything in Premium","Dedicated support","Custom development","SLA guarantee","On-premise deployment","Training & consultation"]}],currentSubscription:r,paymentMethods:l,loading:u,createSubscription:async(e,t)=>{if(!m||!i)throw new Error("User not authenticated or Stripe not loaded");h(!0);try{const o=await fetch(`${p}/subscription/create`,{method:"POST",headers:f(),body:JSON.stringify({tier:e,payment_method_id:t})});if(!o.ok){const e=await o.json();throw new Error(e.detail||"Failed to create subscription")}const a=await o.json();if(a.client_secret){const{error:e}=await i.confirmCardPayment(a.client_secret);if(e)throw new Error(e.message)}c(a.subscription),n.success("Subscription created successfully!")}catch(o){throw n.error(o instanceof Error?o.message:"Failed to create subscription"),o}finally{h(!1)}},cancelSubscription:async()=>{if(m&&r){h(!0);try{const e=await fetch(`${p}/subscription/cancel`,{method:"POST",headers:f()});if(!e.ok)throw new Error("Failed to cancel subscription");const t=await e.json();c(t),n.success("Subscription cancelled successfully")}catch(e){throw n.error(e instanceof Error?e.message:"Failed to cancel subscription"),e}finally{h(!1)}}},addPaymentMethod:async e=>{if(m)try{if(!(await fetch(`${p}/payment/methods`,{method:"POST",headers:f(),body:JSON.stringify({payment_method_id:e})})).ok)throw new Error("Failed to add payment method");await y(),n.success("Payment method added successfully")}catch(t){throw n.error(t instanceof Error?t.message:"Failed to add payment method"),t}},removePaymentMethod:async e=>{if(m)try{if(!(await fetch(`${p}/payment/methods/${e}`,{method:"DELETE",headers:f()})).ok)throw new Error("Failed to remove payment method");await y(),n.success("Payment method removed successfully")}catch(t){throw n.error(t instanceof Error?t.message:"Failed to remove payment method"),t}},setDefaultPaymentMethod:async e=>{if(m)try{if(!(await fetch(`${p}/payment/methods/${e}/default`,{method:"POST",headers:f()})).ok)throw new Error("Failed to set default payment method");await y(),n.success("Default payment method updated")}catch(t){throw n.error(t instanceof Error?t.message:"Failed to update default payment method"),t}},createPaymentIntent:async(e,t)=>{if(!m)throw new Error("User not authenticated");const o=await fetch(`${p}/payment/intent`,{method:"POST",headers:f(),body:JSON.stringify({amount:100*e,description:t||"BrainSAIT Payment",currency:"sar"})});if(!o.ok)throw new Error("Failed to create payment intent");return o.json()},fetchSubscriptionStatus:w},children:o})}function P(){const t=e.useContext(v);if(void 0===t)throw new Error("usePayment must be used within a PaymentProvider");return t}export{y as A,l as L,S as P,h as T,d as a,m as b,P as c,k as u};
