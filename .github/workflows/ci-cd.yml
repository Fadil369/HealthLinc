name: HealthLinc CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/patient-portal/package-lock.json
            frontend/clinician-portal/package-lock.json
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install MCP Server dependencies
        run: |
          cd backend/mcp-server
          npm ci
      
      - name: Lint MCP Server
        run: |
          cd backend/mcp-server
          npm run lint
      
      - name: Install Python dependencies for FHIR Gateway
        run: |
          cd backend/fhir-gateway
          pip install -r requirements.txt
      
      - name: Install dependencies for all LINC agents
        run: |
          pip install -r backend/linc-agents/common-requirements.txt
          for agent in claimlinc recordlinc authlinc notifylinc; do
            cd backend/linc-agents/$agent
            pip install -r requirements.txt
            cd -
          done
      
      - name: Install Patient Portal dependencies
        run: |
          cd frontend/patient-portal
          npm ci
      
      - name: Lint Patient Portal
        run: |
          cd frontend/patient-portal
          npm run lint
      
      - name: Test Patient Portal
        run: |
          cd frontend/patient-portal
          npm test -- --passWithNoTests
          
      - name: Install Clinician Portal dependencies
        run: |
          cd frontend/clinician-portal
          npm ci
      
      - name: Lint Clinician Portal
        run: |
          cd frontend/clinician-portal
          npm run lint
      
      - name: Test Clinician Portal
        run: |
          cd frontend/clinician-portal
          npm test -- --passWithNoTests
  
  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push FHIR Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./backend/fhir-gateway
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: healthlinc/fhir-gateway:latest
      
      - name: Build and push Linc Agents (Multi-agent build)
        uses: docker/build-push-action@v4
        with:
          context: ./backend/linc-agents
          file: ./backend/linc-agents/Dockerfile.multi
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: healthlinc/linc-agents:latest
      
      - name: Build and push Patient Portal
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/patient-portal
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: healthlinc/patient-portal:latest
          
      - name: Build and push Clinician Portal
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/clinician-portal
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: healthlinc/clinician-portal:latest
      
      - name: Set up Cloudflare Wrangler
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          npm install -g wrangler
      
      - name: Deploy MCP Server to Cloudflare Workers
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          cd backend/mcp-server
          wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy:
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /opt/healthlinc && \
          docker compose pull && \
          docker compose up -d && \
          docker system prune -af"
      
      - name: Run health checks
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /opt/healthlinc && \
          ./scripts/health_check.sh"
      
      - name: Notify deployment status
        if: always()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d '{
            "text": "Deployment to production ${{ job.status == 'success' && 'succeeded! ðŸŽ‰' || 'failed! ðŸš¨' }}"
          }'
