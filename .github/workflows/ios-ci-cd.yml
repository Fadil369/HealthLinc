name: iOS App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'ios/**'
      - 'mobile/**'
      - 'react-native/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ios/**'
      - 'mobile/**'
      - 'react-native/**'
  workflow_dispatch:

env:
  XCODE_VERSION: '15.0'
  IOS_SIMULATOR_DEVICE: 'iPhone 15 Pro'
  IOS_SIMULATOR_OS: '17.0'

jobs:
  ios-build-and-test:
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, '[ios]') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version
      
      - name: Setup Node.js for React Native
        if: contains(github.repository, 'react-native')
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install React Native dependencies
        if: contains(github.repository, 'react-native')
        run: |
          cd react-native
          npm ci
          cd ios
          pod install
      
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            react-native/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      
      - name: Install iOS dependencies
        run: |
          if [ -d "ios" ]; then
            cd ios
            pod install
          fi
          
          if [ -d "mobile/ios" ]; then
            cd mobile/ios
            pod install
          fi
      
      - name: Run iOS unit tests
        run: |
          if [ -d "ios" ]; then
            cd ios
            xcodebuild test \
              -workspace HealthLinc.xcworkspace \
              -scheme HealthLinc \
              -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR_DEVICE }},OS=${{ env.IOS_SIMULATOR_OS }}" \
              -testPlan HealthLincTests \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              ONLY_ACTIVE_ARCH=NO
          fi
      
      - name: Run healthcare data validation tests
        run: |
          echo "🏥 Running iOS healthcare data validation tests..."
          
          # Test HIPAA compliance in iOS app
          if [ -d "ios" ]; then
            cd ios
            echo "Testing HIPAA compliance in iOS app..."
            xcodebuild test \
              -workspace HealthLinc.xcworkspace \
              -scheme HealthLinc \
              -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR_DEVICE }},OS=${{ env.IOS_SIMULATOR_OS }}" \
              -testPlan HIPAAComplianceTests \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              ONLY_ACTIVE_ARCH=NO
          fi
          
          echo "✅ iOS healthcare data validation completed"
      
      - name: Build iOS app
        run: |
          if [ -d "ios" ]; then
            cd ios
            xcodebuild build \
              -workspace HealthLinc.xcworkspace \
              -scheme HealthLinc \
              -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR_DEVICE }},OS=${{ env.IOS_SIMULATOR_OS }}" \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              ONLY_ACTIVE_ARCH=NO
          fi
      
      - name: Archive iOS app for distribution
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -d "ios" ]; then
            cd ios
            xcodebuild archive \
              -workspace HealthLinc.xcworkspace \
              -scheme HealthLinc \
              -archivePath HealthLinc.xcarchive \
              -configuration Release \
              CODE_SIGN_IDENTITY="${{ secrets.IOS_CERTIFICATE_NAME }}" \
              PROVISIONING_PROFILE="${{ secrets.IOS_PROVISIONING_PROFILE }}" \
              OTHER_CODE_SIGN_FLAGS="--keychain ${{ runner.temp }}/app-signing.keychain-db"
          fi
      
      - name: Export IPA
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -d "ios" ]; then
            cd ios
            xcodebuild -exportArchive \
              -archivePath HealthLinc.xcarchive \
              -exportPath . \
              -exportOptionsPlist exportOptions.plist
          fi
      
      - name: Upload to App Store Connect
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          if [ -d "ios" ] && [ -f "ios/HealthLinc.ipa" ]; then
            xcrun altool --upload-app \
              --type ios \
              --file ios/HealthLinc.ipa \
              --username ${{ secrets.APPLE_ID }} \
              --password ${{ secrets.APPLE_APP_PASSWORD }}
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-build-artifacts
          path: |
            ios/*.xcarchive
            ios/*.ipa
            ios/build/reports/
      
      - name: Notify iOS build status
        if: always()
        run: |
          STATUS_EMOJI="🎉"
          STATUS_TEXT="succeeded"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS_EMOJI="🚨"
            STATUS_TEXT="failed"
          fi
          
          # Slack notification
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d "{
            \"text\": \"${STATUS_EMOJI} iOS Build ${STATUS_TEXT}!\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Platform:* iOS\n*Status:* ${STATUS_TEXT}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\"
                }
              }
            ]
          }"
          
          # Telegram notification
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "text=${STATUS_EMOJI} iOS Build ${STATUS_TEXT}!%0APlatform: iOS%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}"

  ios-security-scan:
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, '[ios]') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: iOS Security Scan
        run: |
          echo "🔒 Running iOS security scan..."
          
          # Check for hardcoded secrets in iOS code
          echo "🔍 Scanning for hardcoded secrets..."
          grep -r -i "api.key\|secret\|password\|token" ios/ --include="*.swift" --include="*.m" --include="*.h" || echo "No hardcoded secrets found"
          
          # Check for proper keychain usage
          echo "🔑 Checking keychain usage..."
          grep -r "keychain\|SecItemAdd\|SecItemCopyMatching" ios/ --include="*.swift" --include="*.m" || echo "No keychain usage found"
          
          # Check for proper network security
          echo "🌐 Checking network security..."
          grep -r "NSAppTransportSecurity\|https\|ssl" ios/ --include="*.plist" --include="*.swift" || echo "No network security config found"
          
          # HIPAA compliance check for iOS
          echo "🏥 Checking HIPAA compliance..."
          grep -r "PHI\|patient.*data\|medical.*record" ios/ --include="*.swift" --include="*.m" || echo "No PHI patterns found"
          
          echo "✅ iOS security scan completed"
      
      - name: Check iOS app permissions
        run: |
          echo "📱 Checking iOS app permissions..."
          
          # Check Info.plist for sensitive permissions
          if [ -f "ios/HealthLinc/Info.plist" ]; then
            echo "Checking Info.plist permissions..."
            grep -A 2 -B 2 "Usage" ios/HealthLinc/Info.plist || echo "No usage descriptions found"
          fi
          
          # Check for camera/microphone usage (telehealth)
          grep -r "AVCaptureDevice\|AVAudioSession" ios/ --include="*.swift" --include="*.m" || echo "No camera/microphone usage found"
          
          # Check for location services
          grep -r "CLLocationManager\|CoreLocation" ios/ --include="*.swift" --include="*.m" || echo "No location services found"
          
          echo "✅ iOS permissions check completed"

  ios-deploy-testflight:
    needs: [ios-build-and-test, ios-security-scan]
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Install Apple certificates
        run: |
          # Create keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" ${{ runner.temp }}/app-signing.keychain-db
          security set-keychain-settings -lut 21600 ${{ runner.temp }}/app-signing.keychain-db
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" ${{ runner.temp }}/app-signing.keychain-db
          
          # Import certificates
          echo ${{ secrets.IOS_CERTIFICATE_BASE64 }} | base64 --decode > ${{ runner.temp }}/ios_certificate.p12
          security import ${{ runner.temp }}/ios_certificate.p12 -A -t cert -f pkcs12 -k ${{ runner.temp }}/app-signing.keychain-db -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}"
          
          # Import provisioning profile
          echo ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }} | base64 --decode > ${{ runner.temp }}/ios_provisioning.mobileprovision
          cp ${{ runner.temp }}/ios_provisioning.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
      
      - name: Build and upload to TestFlight
        run: |
          if [ -d "ios" ]; then
            cd ios
            
            # Build and archive
            xcodebuild archive \
              -workspace HealthLinc.xcworkspace \
              -scheme HealthLinc \
              -archivePath HealthLinc.xcarchive \
              -configuration Release \
              CODE_SIGN_IDENTITY="${{ secrets.IOS_CERTIFICATE_NAME }}" \
              PROVISIONING_PROFILE="${{ secrets.IOS_PROVISIONING_PROFILE }}" \
              OTHER_CODE_SIGN_FLAGS="--keychain ${{ runner.temp }}/app-signing.keychain-db"
            
            # Export IPA
            xcodebuild -exportArchive \
              -archivePath HealthLinc.xcarchive \
              -exportPath . \
              -exportOptionsPlist exportOptions.plist
            
            # Upload to TestFlight
            xcrun altool --upload-app \
              --type ios \
              --file HealthLinc.ipa \
              --username ${{ secrets.APPLE_ID }} \
              --password ${{ secrets.APPLE_APP_PASSWORD }}
          fi
      
      - name: Notify TestFlight upload
        if: always()
        run: |
          STATUS_EMOJI="🎉"
          STATUS_TEXT="succeeded"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS_EMOJI="🚨"
            STATUS_TEXT="failed"
          fi
          
          # Slack notification
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d "{
            \"text\": \"${STATUS_EMOJI} TestFlight Upload ${STATUS_TEXT}!\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Platform:* iOS TestFlight\n*Status:* ${STATUS_TEXT}\n*Branch:* ${{ github.ref_name }}\n*Build:* ${{ github.run_number }}\"
                }
              }
            ]
          }"
          
          # Telegram notification
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "text=${STATUS_EMOJI} TestFlight Upload ${STATUS_TEXT}!%0APlatform: iOS%0ABranch: ${{ github.ref_name }}%0ABuild: ${{ github.run_number }}"